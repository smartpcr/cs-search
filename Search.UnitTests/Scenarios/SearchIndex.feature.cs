// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Search.UnitTests.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SearchIndexFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "SearchIndex.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchIndex", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SearchIndex")))
            {
                global::Search.UnitTests.Scenarios.SearchIndexFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("uid field \"Id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "title"});
            table1.AddRow(new string[] {
                        "a",
                        "this document is about node."});
            table1.AddRow(new string[] {
                        "b",
                        "this document is about ruby."});
            table1.AddRow(new string[] {
                        "c",
                        "this document is about ruby and node."});
            table1.AddRow(new string[] {
                        "d",
                        "this document is about node. It has node examples"});
#line 5
 testRunner.And("A set of documents", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table2.AddRow(new string[] {
                        "Title"});
#line 11
 testRunner.And("searchable fields", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Idf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void Idf()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Idf", null, new string[] {
                        "index",
                        "tfidf"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 17
    testRunner.When("I index the documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "token",
                        "numDocsContainingToken"});
            table3.AddRow(new string[] {
                        "and",
                        "1"});
            table3.AddRow(new string[] {
                        "document",
                        "4"});
            table3.AddRow(new string[] {
                        "node",
                        "3"});
            table3.AddRow(new string[] {
                        "foobar",
                        "0"});
            table3.AddRow(new string[] {
                        "ruby",
                        "2"});
#line 18
 testRunner.Then("I should get the following IDF values", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TfIdf single token")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void TfIdfSingleToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TfIdf single token", null, new string[] {
                        "index",
                        "tfidf"});
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 28
    testRunner.When("I index the documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "tokens",
                        "documentId",
                        "numDocsWithToken",
                        "tokenCountInDoc"});
            table4.AddRow(new string[] {
                        "node",
                        "a",
                        "3",
                        "1"});
            table4.AddRow(new string[] {
                        "node",
                        "d",
                        "3",
                        "2"});
            table4.AddRow(new string[] {
                        "node",
                        "b",
                        "3",
                        "0"});
#line 29
 testRunner.Then("I should get the following TfIdf values", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TfIdf multi-word token")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void TfIdfMulti_WordToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TfIdf multi-word token", null, new string[] {
                        "index",
                        "tfidf"});
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 37
    testRunner.When("I index the documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "tokens",
                        "documentId",
                        "numDocsWithToken",
                        "tokenCountInDoc"});
            table5.AddRow(new string[] {
                        "has node",
                        "b",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "has node",
                        "d",
                        "0",
                        "0"});
#line 38
 testRunner.Then("I should get the following TfIdf values", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TfIdf no document")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void TfIdfNoDocument()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TfIdf no document", null, new string[] {
                        "index",
                        "tfidf"});
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 45
    testRunner.When("I index the documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "tokens",
                        "tfidf"});
            table6.AddRow(new string[] {
                        "foobar",
                        "0"});
#line 46
 testRunner.Then("I should get the following TfIdf values given no document", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TfIdf multiple tokens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void TfIdfMultipleTokens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TfIdf multiple tokens", null, new string[] {
                        "index",
                        "tfidf"});
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 52
    testRunner.When("I index the documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("I should get the following score for document with id \"d\"", "[\n\t{\n\t\t\"token\": \"document\",\n\t\t\"numDocsWithToken\": 4,\n\t\t\"tokenCountInDoc\": 1\n\t},\n\t" +
                    "{\n\t\t\"token\": \"node\",\n\t\t\"numDocsWithToken\": 3,\n\t\t\"tokenCountInDoc\": 2\n\t}\n]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should get ordered search results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void ShouldGetOrderedSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("should get ordered search results", null, new string[] {
                        "search",
                        "tfidf"});
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 71
 testRunner.When("I search the documents with query \"node\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "docId"});
            table7.AddRow(new string[] {
                        "d"});
            table7.AddRow(new string[] {
                        "a"});
            table7.AddRow(new string[] {
                        "c"});
#line 72
 testRunner.Then("I should get the following search results", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should give documents containing words with a lower IDF a higher relative ranking" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        public virtual void ShouldGiveDocumentsContainingWordsWithALowerIDFAHigherRelativeRanking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("should give documents containing words with a lower IDF a higher relative ranking" +
                    "", null, new string[] {
                        "search",
                        "tfidf"});
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "title"});
            table8.AddRow(new string[] {
                        "e",
                        "foo bar foo bar baz baz baz baz"});
            table8.AddRow(new string[] {
                        "f",
                        "foo bar foo foo baz baz baz baz"});
            table8.AddRow(new string[] {
                        "g",
                        "foo bar baz bar baz baz baz baz"});
            table8.AddRow(new string[] {
                        "h",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "i",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "j",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "k",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "l",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "m",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
            table8.AddRow(new string[] {
                        "n",
                        "foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo baz foo foo b" +
                            "az foo foo"});
#line 80
 testRunner.Given("add the following extra documents", ((string)(null)), table8, "Given ");
#line 92
 testRunner.When("I search the documents with query \"foo bar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "docId"});
            table9.AddRow(new string[] {
                        "e"});
            table9.AddRow(new string[] {
                        "f"});
            table9.AddRow(new string[] {
                        "g"});
#line 93
 testRunner.Then("I should get the following search results", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SearchableFieldsShouldSupportNestedFieldPath(string query, string searchResults, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "search",
                    "tfidf"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("searchable fields should support nested field path", null, @__tags);
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 101
 testRunner.Given("add the following complex documents", "[\n\t{\n\t\t\"Id\": \"2562\",\n\t\t\"login\": {\n\t\t\t\"username\": \"Melissa Smith\",\n\t\t\t\"domain\": \"g" +
                    "oogle.com\"\n\t\t}\n\t},\n\t{\n\t\t\"Id\": \"54213\",\n\t\t\"login\": {\n\t\t\t\"username\": \"John Smith\"," +
                    "\n\t\t\t\"domain\": \"microsoft.com\"\n\t\t}\n\t}\n]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table10.AddRow(new string[] {
                        "login.username"});
            table10.AddRow(new string[] {
                        "login.domain"});
#line 120
 testRunner.And("add extra searchable fields", ((string)(null)), table10, "And ");
#line 124
 testRunner.When(string.Format("I search the documents with query \"{0}\"", query), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.Then(string.Format("I should get the following {0} in output", searchResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("searchable fields should support nested field path: Melissa")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Melissa")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "Melissa")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"2562\"")]
        public virtual void SearchableFieldsShouldSupportNestedFieldPath_Melissa()
        {
#line 100
this.SearchableFieldsShouldSupportNestedFieldPath("Melissa", "\"2562\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("searchable fields should support nested field path: John")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "John")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "John")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"54213\"")]
        public virtual void SearchableFieldsShouldSupportNestedFieldPath_John()
        {
#line 100
this.SearchableFieldsShouldSupportNestedFieldPath("John", "\"54213\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("searchable fields should support nested field path: Smith")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tfidf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Smith")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "Smith")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"2562,54213\"")]
        public virtual void SearchableFieldsShouldSupportNestedFieldPath_Smith()
        {
#line 100
this.SearchableFieldsShouldSupportNestedFieldPath("Smith", "\"2562,54213\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ShouldBeAbleToGetResultsWithPartialMatch(string query, string searchResults, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "search",
                    "partial-search"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("should be able to get results with partial match", null, @__tags);
#line 134
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 135
 testRunner.When(string.Format("I search the documents with query \"{0}\"", query), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then(string.Format("I should get the following {0} in output", searchResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should be able to get results with partial match: ru")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("partial-search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ru")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "ru")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"b\",\"c\"")]
        public virtual void ShouldBeAbleToGetResultsWithPartialMatch_Ru()
        {
#line 134
this.ShouldBeAbleToGetResultsWithPartialMatch("ru", "\"b\",\"c\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should be able to get results with partial match: ab nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("partial-search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ab nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "ab nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"d,a,c\"")]
        public virtual void ShouldBeAbleToGetResultsWithPartialMatch_AbNod()
        {
#line 134
this.ShouldBeAbleToGetResultsWithPartialMatch("ab nod", "\"d,a,c\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ShouldBeAbleToGetResultsWithPartialContainsMatch(string query, string searchResults, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "search",
                    "substring"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("should be able to get results with partial contains match", null, @__tags);
#line 144
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 145
 testRunner.Given("using substring index strategy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
 testRunner.When(string.Format("I search the documents with query \"{0}\"", query), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then(string.Format("I should get the following {0} in output", searchResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should be able to get results with partial contains match: ub")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("substring")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ub")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "ub")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"b\",\"c\"")]
        public virtual void ShouldBeAbleToGetResultsWithPartialContainsMatch_Ub()
        {
#line 144
this.ShouldBeAbleToGetResultsWithPartialContainsMatch("ub", "\"b\",\"c\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("should be able to get results with partial contains match: out nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("substring")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "out nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:query", "out nod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:searchResults", "\"d,a,c\"")]
        public virtual void ShouldBeAbleToGetResultsWithPartialContainsMatch_OutNod()
        {
#line 144
this.ShouldBeAbleToGetResultsWithPartialContainsMatch("out nod", "\"d,a,c\"", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
